import cv2
import numpy as np

def main(video_source=0):  # Change to video file path if needed
    # Load the predefined dictionary
    aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_1000)

    # Initialize the detector parameters
    parameters = cv2.aruco.DetectorParameters()  # Use this instead of DetectorParameters_create()
    
    # Create ArUco detector
    detector = cv2.aruco.ArucoDetector(aruco_dict, parameters)

    # Open video capture
    cap = cv2.VideoCapture(video_source)

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Convert frame to grayscale
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Detect markers
        corners, ids, _ = detector.detectMarkers(gray)

        # Draw detected markers
        if ids is not None:
            cv2.aruco.drawDetectedMarkers(frame, corners, ids)
            for i, corner in zip(ids, corners):
                print(f"Marker ID: {i[0]} - Corners: {corner}")
                # Get the position to place the ID (use the bottom-left corner of the marker for positioning)
                position = tuple(corner[0][0].astype(int))  # Taking the first corner's x, y
                # Display the marker ID with a larger font
                cv2.putText(frame, f"ID: {i[0]}", position, cv2.FONT_HERSHEY_SIMPLEX, 5, (0, 255, 0), 6, cv2.LINE_AA)

        # Display the frame
        cv2.imshow('ArUco Marker Detection', frame)

        # Break loop on 'q' key press
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release resources
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main(0)  # Change to 0 for webcam, or use a video file path
